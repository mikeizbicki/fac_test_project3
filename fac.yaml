# This file demonstrates how postreqs work.

"outline.json":
  cmd: cp basic.json outline.json
  dependencies:
    - basic.json
    - deps/a
    - deps/b

# This target has nothing to build when run initially
# because the $RESOURCE variable will resolve to nothing.
# The target will build files when run as a postreq for the "sub$LEVEL1/outline.json" target below
# because within that target the $RESOURCE variable will be resolved to a non-empty list.
# Subsequent runs of this target will have the $RESOURCE variable resolve to a non-empty list and will (re-)built those files if needed.
"resources/$RESOURCE/about.json":
  cmd: cp basic.json resources/$RESOURCE/about.json
  dependencies:
    - basic.json
    - outline.json
  variables:
    RESOURCE:
      # NOTE:
      # The `resources` folder is not included in the repo,
      # and should be autogenerated at some point in the build.
      # If we try to build this target without the `resources` folder existing,
      # then the ls command will fail, breaking the build.
      # Adding `|| true` ensures that the overall command does not fail even if ls fails.
      # In this case, there will be nothing output to stdout,
      # and so the RESOURCE variable will be empty.
      ls resources || true

"sub$LEVEL1/outline.json":
  cmd: cp basic.json sub$LEVEL1/outline.json
  dependencies:
    - outline.json
    - resources/$RESOURCE/about.json
  variables:
    LEVEL1:
      jq -r 'range(0; .sections | length)' outline.json
    NAME: |
      echo "d"
      echo "e"
      echo "f"

  # NOTE:
  # A postreq is a target that will automatically be built after the parent target is built.
  # Postreqs should be used sparingly.
  postreqs:
    # The `a`, `b`, and `c` below will be the values of the $RESOURCE variable
    # when the "resources/$RESOURCE/about.json" target is built for this postreq.
    - resources/a/about.json
    - resources/b/about.json
    - resources/c/about.json

    # FIXME:
    # postreqs could be made much more powerful by allowing variable expansion,
    # but this is currently not implemented.
    # The following postreq will not work:
    # - resources/$NAME/about.json
    # The following postreq will work:
    # - resources/$RESOURCe/about.json

"sub$LEVEL1/sub$LEVEL2/outline.json":
  cmd:
    cp basic.json sub$LEVEL1/sub$LEVEL2/outline.json
  dependencies:
    - outline.json
    - sub$LEVEL1/outline.json
  variables:
    LEVEL1:
      jq -r 'range(0; .sections | length)' outline.json
    LEVEL2:
      jq -r "range(0; [.sections | length, $(($LEVEL1 + 1))] | min )" sub$LEVEL1/outline.json

"final.txt":
  cmd:
    echo hello > "final.txt"
  dependencies:
    - sub$LEVEL1/sub$LEVEL2/outline.json
